{"version":3,"sources":["Header/Header.js","UserItem/UserItem.js","UserList/UserList.js","App/App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","href","Collapse","className","Text","Component","UserItem","Card","this","props","gender","Title","name","Body","Img","src","image","age","city","country","UserList","getResource","fetch","then","data","json","setState","users","results","catch","err","alert","sortByYoungestAge","state","sort","a","b","dob","sortByOldestAge","Container","fluid","Row","Col","md","ButtonGroup","aria-label","Button","onClick","map","item","index","key","first","last","picture","large","toUpperCase","location","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.40036a71.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.css';\nimport { Navbar } from 'react-bootstrap';\n\nexport default class Header extends Component {\n    render() {\n        let user = 'Bogdan';\n        return (\n            <Navbar bg=\"light\" variant=\"light\">\n                <Navbar.Brand href=\"unchor_is_valid\">Friends App</Navbar.Brand>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text>\n                    Signed in as: <a href=\"unchor_is_valid\">{user}</a>\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './UserItem.css';\nimport { Card } from 'react-bootstrap';\n\nexport default class UserItem extends Component {\n    render() {\n        return (\n            <Card>\n                {this.props.gender === \"MALE\" \n                    ? <Card.Title className=\"card-title-male\"\n                    >{this.props.name}</Card.Title>\n                    : <Card.Title\n                    >{this.props.name}</Card.Title>\n                }\n                <Card.Body>\n                    <Card.Img variant=\"top\" src={this.props.image} />\n                    <Card.Text>{this.props.gender}</Card.Text>\n                    <Card.Text>{this.props.age}</Card.Text>\n                    <Card.Text>{this.props.city}</Card.Text>\n                    <Card.Text>{this.props.country}</Card.Text>\n                </Card.Body>\n            </Card>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './UserList.css';\nimport { Container, Row, Col, ButtonGroup, Button } from 'react-bootstrap';\nimport { SortUpAlt, SortDownAlt } from 'react-bootstrap-icons';\n\nimport UserItem from '../UserItem/UserItem';\n\nexport default class UserList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: []\n        };\n        this.getResource();\n    }\n    \n    \n    getResource = () => {\n        fetch('https://randomuser.me/api/?results=12&nat=DE,GB,AU&page=1&seed=c')\n        .then(data => data.json())\n        .then(data => this.setState({users: data.results}))\n        .catch(err => alert(`${err} Please reload page`))\n    }\n\n    sortByYoungestAge = () => {\n        this.setState({users: this.state.users.sort((a, b) =>  a.dob.age - b.dob.age)});\n    }\n\n    sortByOldestAge = () => {\n        this.setState({users: this.state.users.sort((a, b) =>  b.dob.age - a.dob.age)});\n    }\n\n    render() {\n        return(\n            <Container fluid>\n                <Row>\n                    <Col md={3}>\n                        <div className=\"sort\">\n                            <h4>Filter</h4>\n                            <div>\n                                <p>By Age</p>\n                                <ButtonGroup aria-label=\"Sort By Age\">\n                                    <Button variant=\"outline-warning\" onClick={() => this.sortByYoungestAge()}><SortDownAlt /></Button>\n                                    <Button variant=\"outline-warning\" onClick={() => this.sortByOldestAge()}><SortUpAlt /></Button>\n                                </ButtonGroup>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col className=\"friends-list\" md={9}>\n                        {this.state.users.map((item, index) => { \n                            return <UserItem\n                                    key={index} \n                                    name={`${item.name.first} ${item.name.last}`}\n                                    image={item.picture.large}\n                                    gender={`${item.gender.toUpperCase()}`} \n                                    age={`Age: ${item.dob.age} years`}\n                                    city={`City: ${item.location.city}`}\n                                    country={`Country: ${item.location.country}`}\n                                    />\n                        })}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from '../Header/Header';\n// import UsersService from '../Services/UsersService';\nimport UserList from '../UserList/UserList';\n\nclass App extends Component {\n    // getUsers = new UsersService();\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        // this.getUsers.getUsers();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <UserList/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}